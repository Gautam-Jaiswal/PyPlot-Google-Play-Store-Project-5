# -*- coding: utf-8 -*-
"""Google Play Store Project-5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16xoWIDDpgvQpEFDrmEhpBjp9ED6CS6-h

# Introduction

In this notebook, we will do a comprehensive analysis of the Android app market by comparing thousands of apps in the Google Play store.

# About the Dataset of Google Play Store Apps & Reviews

# Import Statements
"""

import pandas as pd
import plotly.express as px

"""# Notebook Presentation"""

# Show numeric output in decimal format e.g., 2.15
pd.options.display.float_format = '{:,.2f}'.format

"""# Read the Dataset"""

df_apps = pd.read_csv('apps.csv')

"""# Data Cleaning

**Challenge**: How many rows and columns does `df_apps` have? What are the column names? Look at a random sample of 5 different rows with [.sample()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.sample.html).
"""

df_apps.shape

df_apps.columns

df_apps.describe()

df_apps.sample(n=5)

"""### Drop Unused Columns

**Challenge**: Remove the columns called `Last_Updated` and `Android_Version` from the DataFrame. We will not use these columns. 
"""

df_apps.drop(columns=['Last_Updated','Android_Ver'], inplace=True)
df_apps.head()

"""### Find and Remove NaN values in Ratings

**Challenge**: How may rows have a NaN value (not-a-number) in the Ratings column? Create DataFrame called `df_apps_clean` that does not include these rows. 
"""

df_apps.isna().values.sum()

df_apps_clean = df_apps.dropna()
df_apps_clean.sample(n=5)

df_apps_clean.shape

"""### Find and Remove Duplicates

**Challenge**: Are there any duplicates in data? Check for duplicates using the [.duplicated()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.duplicated.html) function. How many entries can you find for the "Instagram" app? Use [.drop_duplicates()](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.drop_duplicates.html) to remove any duplicates from `df_apps_clean`. 

"""

df_apps_clean[df_apps_clean.duplicated()]

df_apps_clean[df_apps_clean['App']=='Instagram']

# need to specify the subset for identifying duplicates

df_apps_clean.drop_duplicates(subset=['App','Type','Price'], inplace=True)

#df_apps_clean[df_apps_clean['App']=='Instagram'] ... Working

df_apps_clean.shape

"""# Find Highest Rated Apps

**Challenge**: Identify which apps are the highest rated. What problem might you encounter if you rely exclusively on ratings alone to determine the quality of an app?
"""

df_apps_clean.sort_values('Rating',ascending=False).head()

"""# Find 5 Largest Apps in terms of Size (MBs)

**Challenge**: What's the size in megabytes (MB) of the largest Android apps in the Google Play Store. Based on the data, do you think there could be limit in place or can developers make apps as large as they please? 
"""

df_apps_clean.sort_values('Size_MBs',ascending=False).head()

"""# Find the 5 App with Most Reviews

**Challenge**: Which apps have the highest number of reviews? Are there any paid apps among the top 50?
"""

df_apps_clean.sort_values('Reviews',ascending=False).head(n=5)

"""# Plotly Pie and Donut Charts - Visualise Categorical Data: Content Ratings"""

rating = df_apps_clean['Content_Rating'].value_counts()
rating

fig= px.pie(labels=rating.index, values=rating.values, title='Content Rating', names=rating.index)
fig.update_traces(textposition='outside', textinfo='percent+label')
fig.show()

fig= px.pie(labels=rating.index, values=rating.values, title='Content Rating', hole=0.6, names=rating.index)
fig.update_traces(textposition='outside', textinfo='percent+label')
fig.show()

"""# Numeric Type Conversion: Examine the Number of Installs

**Challenge**: How many apps had over 1 billion (that's right - BILLION) installations? How many apps just had a single install? 

Check the datatype of the Installs column.

Count the number of apps at each level of installations. 

Convert the number of installations (the Installs column) to a numeric data type. Hint: this is a 2-step process. You'll have make sure you remove non-numeric characters first. 
"""

type(df_apps_clean['Installs'][21])

df_apps_clean.groupby('Installs').count()

df_apps_clean[['App','Installs']].groupby('Installs').count()

df_apps_clean['Installs']= df_apps_clean['Installs'].astype(str).str.replace(',','')
df_apps_clean['Installs']= pd.to_numeric(df_apps_clean.Installs)
df_apps_clean[['App','Installs']].groupby('Installs').count()

"""# Find the Most Expensive Apps, Filter out the Junk, and Calculate a (ballpark) Sales Revenue Estimate

Let's examine the Price column more closely.

**Challenge**: Convert the price column to numeric data. Then investigate the top 20 most expensive apps in the dataset.

Remove all apps that cost more than $250 from the `df_apps_clean` DataFrame.

Add a column called 'Revenue_Estimate' to the DataFrame. This column should hold the price of the app times the number of installs. What are the top 10 highest grossing paid apps according to this estimate? Out of the top 10 highest grossing paid apps, how many are games?

"""

df_apps_clean.head()

df_apps_clean['Price'] = df_apps_clean['Price'].astype(str).str.replace('$','')
df_apps_clean['Price'] = pd.to_numeric(df_apps_clean['Price'])
df_apps_clean.sample()

df_apps_clean.sort_values('Price', ascending=False).head(5)

"""### The most expensive apps sub $250"""

df_apps_clean = df_apps_clean[df_apps_clean['Price']<250]
df_apps_clean.sort_values('Price', ascending=False)

"""### Highest Grossing Paid Apps (ballpark estimate)"""

#df_apps_clean.insert(loc=6, column='Revenue_Estimate', value=0)
#df_apps_clean.head()

df_apps_clean['Revenue_Estimate']= df_apps_clean['Installs'] * df_apps_clean['Price']
df_apps_clean.sort_values('Revenue_Estimate', ascending=False)[:10]

"""# Plotly Bar Charts & Scatter Plots: Analysing App Categories"""

df_apps_clean['Category'].unique()

top_10category = df_apps_clean['Category'].value_counts()[:10]
top_10category

bar = px.bar(x=top_10category.index, y=top_10category.values)
bar.show()

category_installs_df = df_apps_clean.groupby('Category').agg({'Installs': pd.Series.sum})
category_installs_df.sort_values('Installs',inplace=True, ascending=True)
category_installs_df.head()

"""### Vertical Bar Chart - Highest Competition (Number of Apps)"""

bar = px.bar(x=category_installs_df.index, y=category_installs_df.values)
bar.show()

"""### Horizontal Bar Chart - Most Popular Categories (Highest Downloads)"""

bar = px.bar(x=category_installs_df['Installs'], y=category_installs_df.index, orientation='h')
bar.show()

"""# Extracting Nested Data from a Column

**Challenge**: How many different types of genres are there? Can an app belong to more than one genre? Check what happens when you use .value_counts() on a column with nested values? See if you can work around this problem by using the .split() function and the DataFrame's [.stack() method](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.stack.html). 

"""

df_apps_clean.info()

len(df_apps_clean['Genres'].unique())
#df_apps_clean['Genres'].unique()

# Problem: Have multiple categories seperated by
df_apps_clean.Genres.value_counts().sort_values(ascending=True) [:5]

stack = df_apps_clean.Genres.str.split(';', expand=True).stack()
print(stack.shape)

s = stack.value_counts()
len(s)

"""# Colour Scales in Plotly Charts - Competition in Genres

**Challenge**: Can you create this chart with the Series containing the genre data? 

<img src=https://imgur.com/DbcoQli.png width=400>

Try experimenting with the built in colour scales in Plotly. You can find a full list [here](https://plotly.com/python/builtin-colorscales/). 

* Find a way to set the colour scale using the color_continuous_scale parameter. 
* Find a way to make the color axis disappear by using coloraxis_showscale.
"""

bar = px.bar(x=s[:15].index, y=s[:15].values, title='Top Genres',
             hover_name=s.index[:15],
             color=s.values[:15],
             color_continuous_scale='Agsunset')
bar.update_layout(xaxis_title='Genre',yaxis_title='Number of Apps',coloraxis_showscale=False)
bar.show()

"""# Grouped Bar Charts: Free vs. Paid Apps per Category"""

df_apps_clean.Type.value_counts()

df_free_vs_paid = df_apps_clean.groupby(["Category", "Type"], as_index=False).agg({'App': pd.Series.count})
df_free_vs_paid.head()

g_bar = px.bar(df_free_vs_paid,
               x='Category',
               y='App',
               title='Free vs Paid Apps by Category',
               color='Type',
               barmode='group')
 
g_bar.update_layout(xaxis_title='Category',
                    yaxis_title='Number of Apps',
                    xaxis={'categoryorder':'total descending'},
                    yaxis=dict(type='log'))
 
g_bar.show()

"""# How Much Can You Charge? Examine Paid App Pricing Strategies by Category

**Challenge**: What is the median price price for a paid app? Then compare pricing by category by creating another box plot. But this time examine the prices (instead of the revenue estimates) of the paid apps. I recommend using `{categoryorder':'max descending'}` to sort the categories.
"""

df_apps_clean.head()

df_paid_apps = df_apps_clean[df_apps_clean['Type']=='Paid']
df_paid_apps.Price.median()

box = px.box(df_paid_apps,
             x='Category',
             y="Price",
             title='Price per Category')
 
box.update_layout(xaxis_title='Category',
                  yaxis_title='Paid App Price',
                  xaxis={'categoryorder':'max descending'},
                  yaxis=dict(type='log'))
 
box.show()